{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prosjekt i databehandling\n",
    "\n",
    "Å kunne automatisere behandlingen av store mengder informasjon er en viktig del av programmering. I dette prosjektet skal dere prøve å knytte programmet deres til større databaser med informasjon, og trekke informasjonen ut av disse databasene. Deretter skal programmene deres tolke informasjonen og behandle dataene.  \n",
    "\n",
    "Dere skal jobbe i grupper på 2–4 personer, og alle skal bidra til det ferdige produktet. Det er veldig vanlig å jobbe i grupper når en skal programmere i yrkeslivet, og det er nyttig å få litt innblikk i hvordan en slik prosess fungerer allerede nå. Det er viktig at dere fordeler oppgaver på en hensiktsmessig måte mellom dere. Dere velger først en prosjektleder som kan ha det overordna ansvaret for at alt skal henge sammen til slutt, og som delegerer oppgaver som trengs å gjøres. For at det skal være enkelt å fordele oppgaver, kan det være lurt å lage ulike funksjoner som gjør forskjellige operasjoner. Dere kan eventuelt sitte sammen og gjøre all programmeringa felles. Prosjektet skal munne ut i et ferdig program og en rapport fra prosjektarbeidet. \n",
    "\n",
    "Dere kan velge mellom tre naturvitenskapelige problemstillinger, men dere står også fritt til å lage et eget prosjekt, dersom dere har noen gode idéer. Snakk med læreren når dere har fått en idé som dere tror lar seg gjennomføre. Under evaluering av prosjektet blir det lagt vekt på:\n",
    "\n",
    "- God og strukturert kode\n",
    "- Kreativ og velreflektert løsningsstrategi\n",
    "- Realfaglig forståelse\n",
    "- Grad av samarbeid\n",
    "\n",
    "Det kan være lurt å bruke Github for å samarbeide, og dere skal bruke Jupyter Notebook som leveringsformat, der dere skal lage en rapport med programmene integrert i rapporten. Rapporten skal inneholde:\n",
    "- Nødvendig faglig matematisk/naturvitenskapelig teori.\n",
    "- Litt teori rundt noe av det programmeringstekniske (som statistik behandling av data eller regresjon, dersom du bruker det).\n",
    "- Drøfting av dataene og analysen dere har gjort.\n",
    "\n",
    "Nedenfor er forslag til oppgaver som dere kan fordype dere i."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## _Oppgave 2: Lineær regresjon (matematikk)_\n",
    "\n",
    "<img src=\"https://i.imgur.com/0IWSKhS.png\" width=\"40%\">\n",
    "\n",
    "\n",
    "### Teori \n",
    "\n",
    "I matematikk 1T diskuterer man at hvis man gjør målinger/observasjoner og plotter dette som punkter i et koordinatsystem, da kan man bruke *regresjon* for å finne en kurve som passer best til punktene. Helt konkret, i matematikk 1T brukte man GeoGebra til å finne en lineær funksjon, $f(x)=ax+b$, som passet best til punktene. Men, hva betyr 'best'? Hvordan finner man egentlig denne funksjonen? Hvor sikker kan vi være på funksjonsuttrykket vårt? Sagt på en annen måte, hva pokker er lineær regresjon og hva er matematikken bak det?\n",
    "\n",
    "Anta man har f.eks. tre punkter $(x_1,y_1), (x_2,y_2), (x_3,y_3)$ som ikke ligger på en linje. Hvis vi ønsker å finne en linje som passer 'best'  til disse så kan man tenke seg at avstanden fra linja til punktene skal være minst mulig. Det betyr at hvis man kan lage et uttrykk for avstanden så bør man kunne derivere uttrykket for å finne et uttrykk for linja sammen med litt matematikk. \n",
    "\n",
    "\n",
    "### Oppgave \n",
    "\n",
    "1. Finn ut hvordan man gjør lineær regresjon for tre punkter i planet ved å lage et uttrykk for avstanden/feilen og minimere med derivasjon.\n",
    "2. Hva hadde skjedd hvis man hadde hatt flere enn tre punkter?\n",
    "3. Lag et program et program der brukeren kan taste inn $n$ punkter og programmet gjør lineær regresjon.\n",
    "4. Bruk programmet deres på et egnet stort datasett.\n",
    "5. Sammenlignn lineær regresjonsbiblioteker i Python med deres eget program."
   ]
  },
